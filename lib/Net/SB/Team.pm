package Net::SB::Team;

use warnings;
use strict;
use Carp;
use base 'Net::SB';
use Net::SB::Member;

our $VERSION = Net::SB->VERSION;

sub new {
	my ($class, $parent, $result, $name) = @_;

	# create object based on the given result
	unless (defined $result and ref($result) eq 'HASH') {
		confess "Must call new() with a parsed JSON team result HASH!";
	}
    # this is a typical result 
    #   {
    #     'name' => 'core',
    #     'id' => '79400ce5-xxxx-4695-95dc-beba0ccd8c3a',
    #     'href' => 'https://api.sbgenomics.com/v2/teams/79400ce5-xxxx-4695-95dc-beba0ccd8c3a'
    #   }
	my $self = $result;

	# minimum data
	unless (exists $self->{href} and exists $self->{id}) {
		confess "Missing critical href and/or id keys!";
	}
	$self->{name}    ||= q();    # this should never be null
	
	# add parent and name
	$self->{divobj} = $parent; # should only be the division object
	$self->{name}  = $name;

	return bless $self, $class;
}

sub id {
	return shift->{id} || undef;
}

sub name {
	# I think this should always be present
	return shift->{name};
}

sub href {
	return shift->{href} || undef;
}

sub list_members {
	my $self = shift;

	# execute
	my $h = {'x-sbg-advance-access' => 'advance'};
	my $url = sprintf "%s/teams/%s/members", $self->endpoint, $self->{id};
	my $results = $self->execute('GET', $url, $h);
	my @members = map { Net::SB::Member->new($self, $_) } @{$results};
	return wantarray ? @members : \@members;
}

sub add_member {
	my $self = shift;
	my $member = shift;
	unless ($member) {
		carp "Must pass a member object or ID to add a member!";
		return;
	}

	# get member id
	my $id;
	if (ref($member) eq 'Net::SB::Member') {
		$id = $member->id;
	}
	else {
		$id = $member;
	}
	if ($id !~ m/^ [a-z0-9\-]+ \/ [a-z0-9\-]+ $/x) {
		carp "ID '$id' doesn't match expected pattern of lab-division/user-name";
		return;
	}

	# execute
	my $data = { 'id' => $id };
	my $url = $self->href . '/members';
	my $result = $self->execute('POST', $url, undef, $data);
	return $result;
}

sub delete_member {
	my $self = shift;
	my $member = shift;
	unless ($member) {
		carp "Must pass a member object or ID to add a member!";
		return;
	}

	# get member id
	my $id;
	if (ref($member) eq 'Net::SB::Member') {
		$id = $member->id;
	}
	else {
		$id = $member;
	}
	if ($id !~ m/^ [a-z0-9\-]+ \/ [a-z0-9\-]+ $/x) {
		carp "ID '$id' doesn't match expected pattern of lab-division/user-name";
		return;
	}

	# execute
	my $url = sprintf "%s/members/%s", $self->href, $id;
	return $self->execute('DELETE', $url); # this may not necessarily be true
}

1;

__END__

=head1 Net::SB::Team - a Team on the Seven Bridges platform.

=head1 DESCRIPTION

This represents a team on the Seven Bridges platform, or a collection of members
with group permissions. It may be generated by methods from a
L<Net::SB::Division> object. 

* L<Net::SB::Division/list_teams> 

* L<Net::SB::Division/create_team> 



=head1 METHODS

=over 4

=item new

Generally this object should only be initialized from another object and not 
directly by end-users. It requires returned JSON data from the Seven Bridges 
API and parent object information.

=item id

Returns the ID, something like C<79400ce5-xxxx-4695-95dc-beba0ccd8c3a>.

=item name

Returns the name of the team.

=item href

Returns the URL for the team.

=item list_members

Returns an array or array reference of L<Net::SB::Member> objects representing 
the members of the team.

=item add_member($member)

Provide either a L<Net::SB::Member> object or a member ID representing the member 
to be added to the team. It returns the API result.

=item delete_member($member)

Provide either a L<Net::SB::Member> object or a member ID representing the member 
to be removed from the team. 

=back

=head1 AUTHOR

 Timothy J. Parnell, PhD
 Bioinformatics Shared Resource
 Huntsman Cancer Institute
 University of Utah
 Salt Lake City, UT, 84112

This package is free software; you can redistribute it and/or modify
it under the terms of the Artistic License 2.0.  


