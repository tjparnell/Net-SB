package Net::SB::Task;

use warnings;
use strict;
use Carp;
use base 'Net::SB';
use Net::SB::Member;

our $VERSION = Net::SB->VERSION;

sub new {
	my ($class, $parent, $result) = @_;
	if (ref $class) {
		$class = ref $class;
	}

	# create object based on the given result
	unless (defined $result and ref($result) eq 'HASH') {
		confess "Must call new() with a parsed JSON team result HASH!";
	}
    # this is a typical result 
	#     {
	#       href => "https://cgc-api.sbgenomics.com/v2/tasks/f3f5d056-f06d-4615-xxxx-xxxxxxxxxxxx",
	#       id => "f3f5d056-f06d-4615-xxxx-xxxxxxxxxxxx",
	#       name => "Workflow run - 06-12-23 16:40:45",
	#       project => "big-shot-pi/hci-bioinformatics"
	#     }
	my $self = $result;

	# minimum data
	unless (exists $self->{href} and exists $self->{id}) {
		confess "Missing critical href and/or id keys!";
	}
	$self->{name}    ||= q();    # this should never be null

	# add parent and division information
	$self->{divobj} = $parent->{divobj};
	my $parent_class = ref $parent;
	if ($parent_class eq 'Net::SB::Project') {
		$self->{projobj} = $parent;
		$self->{project} ||= $parent->id;
	}
	
	return bless $self, $class;
}

sub id {
	return shift->{id} || undef;
}

sub name {
	return shift->{name};
}

sub href {
	return shift->{href} || undef;
}

sub _get_details {
	my $self = shift;
	my $result = $self->execute('GET', $self->{href});
	foreach my $key (keys %{$result}) {
		$self->{$key} = $result->{$key};
	}
}

sub batch {
	my $self = shift;
	unless ( exists $self->{batch} ) {
		$self->_get_details;
	}
	return $self->{batch};
}

sub status {
	my $self = shift;
	unless ( exists $self->{status} ) {
		$self->_get_details;
	}
	return $self->{status};
}

sub start_time {
	my $self = shift;
	unless ( exists $self->{start_time} ) {
		$self->_get_details;
	}
	return $self->{start_time};
}

sub end_time {
	my $self = shift;
	unless ( exists $self->{end_time} ) {
		$self->_get_details;
	}
	return $self->{end_time};
}

sub created_by {
	my $self = shift;
	unless ( exists $self->{created_by} ) {
		$self->_get_details;
	}
	my $id = $self->{created_by};
	my $data = {
		'id'        => $id,
		'username'  => $id,
		'href'      => sprintf("%s/users/%s", $self->{href}, $id),
	};
	return Net::SB::Member->new($self, $data);
}

sub app {
	my $self = shift;
	unless ( exists $self->{app} ) {
		$self->_get_details;
	}
	return $self->{app};
}

sub get_details {
	my $self = shift;
	unless ( exists $self->{app} ) {
		$self->_get_details;
	}
	my %data;
	foreach my $key ( keys %{ $self } ) {
		next if $key eq 'divobj';
		next if $key eq 'projobj';
		$data{$key} = $self->{$key};
	}
	return wantarray ? %data : \%data;
}

sub get_children {
	my $self = shift;
	return unless $self->batch;
	my $url = sprintf "%s/tasks?parent=%s", $self->endpoint, $self->id;
	my @results = $self->execute('GET', $url);
	my @children;
	if ( @results ) {
		foreach my $t (@results) {
			my $task = $self->new($self, $t);
			if ($task) {
				$task->{batch} = 0; # we know this is a child task
				push @children, $task;
			}
		}
	}
	return wantarray ? @children : \@children;
}

1;

__END__

=head1 Net::SB::Task - a Task on the Seven Bridges platform.

=head1 DESCRIPTION

This represents a task on the Seven Bridges platform. It may be generated by methods
from a L<Net::SB::Project> object. 

* L<Net::SB::Project/list_tasks>

* L<Net::SB::Project/get_task>

This is currently a very simple object and has very limited functionality, and is
primarily restricted to listing information about existing tasks, not creating 
or executing new tasks.

=head1 METHODS

=over 4

=item new

Generally this object should only be initialized from another object and not 
directly by end-users. It requires returned JSON data from the Seven Bridges 
API and parent object information.

=item id

Returns the ID, something like C<f3f5d056-f06d-4615-xxxx-xxxxxxxxxxxx>.

=item name

Returns the name of the taks.

=item href

Returns the URL for the task.

=item batch

Returns boolean (1 or 0) value whether this was a batch task with child tasks.

=item status

Returns the status value of the task, usually C<RUNNING>, C<ABORTED>, C<COMPLETED>, 
etc. 

=item start_time

Returns a string representing the start day and time, such as 
C<2016-04-05T12:18:14Z>.

=item end_time

Returns a string representing the end day and time, such as 
C<2016-04-05T12:18:14Z>.

=item created_by

Returns a L<Net::SB::Member> object representing the user. Note that information 
available to other users is extremely limited.

=item app

Returns a string representing the application identifier.

=item get_details

Returns a hash reference results of the complete details for the task. 

=item get_children

If the object is a batch task with one or more child tasks, this will return an 
array or array reference of the child task objects. 

=back

=head1 AUTHOR

 Timothy J. Parnell, PhD
 Bioinformatics Shared Resource
 Huntsman Cancer Institute
 University of Utah
 Salt Lake City, UT, 84112

This package is free software; you can redistribute it and/or modify
it under the terms of the Artistic License 2.0.  



